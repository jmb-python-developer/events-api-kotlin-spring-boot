spring:
  datasource:
    url: jdbc:h2:file:./data/eventsdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: none
    show-sql: false
    defer-datasource-initialization: false
    open-in-view: false

  # ← Add SQL initialization config
  sql:
    init:
      mode: always  # ← Execute scripts for all database types
      schema-locations: classpath:schema.sql
      data-locations: [ ] # classpath:data.sql # uncomment for dev testing and data initialization
      continue-on-error: false

  output:
    ansi:
      enabled: detect

resilience4j:
  circuitbreaker:
    instances:
      providerApi:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        registerHealthIndicator: true
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slow-call-duration-threshold: 2s
        slow-call-rate-threshold: 50

  retry:
    instances:
      providerApi:
        maxAttempts: 3
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2.0
        enableRandomizedWait: false
        retryExceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - java.net.UnknownHostException
          - org.springframework.web.client.ResourceAccessException
        ignoreExceptions:
          - com.jmb.events_api.sync.infrastructure.external.exception.ProviderApiException

  timelimiter:
    instances:
      providerApi:
        timeoutDuration: 3s
        cancelRunningFuture: true

# Provider Configuration
fever:
  provider:
    url: http://127.0.0.1:3001/api/events #"https://provider.code-challenge.feverup.com/api/events"
    timeout: 5s
    retry-attempts: 3
    retry-delay: 500ms

# Clean logging
logging:
  level:
    com.jmb.events_api: INFO
    org.hibernate.SQL: WARN
    org.springframework.web: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,circuitbreakers,retries
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

# OpenAPI/Swagger configuration
# Add to your existing application.yml
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
  info:
    title: "Fever Events API"
    description: "Events search API compliant with Fever specification"
    version: "1.0.0"
